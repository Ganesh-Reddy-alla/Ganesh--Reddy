import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Step 1: Load the dataset
data = pd.read_csv('/content/CO2 Emissions.csv')  # Replace 'your_dataset.csv' with the actual file path

# Step 2: Preprocess the data
# (You may need to handle missing values, convert categorical variables, etc.)

# Step 3: Split the data into training and testing sets
X = data[['Engine Size(L)', 'Cylinders', 'Fuel Consumption City (L/100 km)', 'Fuel Consumption Hwy (L/100 km)', 'Fuel Consumption Comb (L/100 km)']]
y = data['CO2 Emissions(g/km)']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define epoch and estimator values
ann_epoch_values = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]
rf_estimator_values = [10, 50, 100, 150, 200, 250, 300, 350, 400, 450]

# Lists to store accuracies
ann_accuracies = []
rf_accuracies = []

# Step 4: Train Random Forest and ANN models
for epochs in ann_epoch_values:
    # Train ANN model
    ann_model = MLPRegressor(hidden_layer_sizes=(100, 100), max_iter=epochs, random_state=42)
    ann_model.fit(X_train, y_train)
    ann_predictions = ann_model.predict(X_test)
    ann_accuracy = 100 - (mean_squared_error(y_test, ann_predictions) ** 0.5)
    ann_accuracies.append(ann_accuracy)

for n_estimators in rf_estimator_values:
    # Train Random Forest model
    random_forest_model = RandomForestRegressor(n_estimators=n_estimators, random_state=42)
    random_forest_model.fit(X_train, y_train)
    rf_predictions = random_forest_model.predict(X_test)
    rf_accuracy = 100 - (mean_squared_error(y_test, rf_predictions) ** 0.5)
    rf_accuracies.append(rf_accuracy)

# Step 5: Evaluate and print the accuracies
print("Accuracy of ANN:")
for i, epochs in enumerate(ann_epoch_values):
    print(f"With {epochs} epochs: {ann_accuracies[i]:.2f}%")

print("\nAccuracy of Random Forest:")
for i, n_estimators in enumerate(rf_estimator_values):
    print(f"With {n_estimators} estimators: {rf_accuracies[i]:.2f}%")

# Step 6: Compare the best accuracies
best_ann_accuracy = max(ann_accuracies)
best_rf_accuracy = max(rf_accuracies)
if best_rf_accuracy > best_ann_accuracy:
    print("\nRandom Forest has a higher accuracy compared to ANN.")
else:
    print("\nANN has a higher accuracy compared to Random Forest.")

# Step 7: Visualize the results
plt.plot(ann_epoch_values, ann_accuracies, label='ANN')
plt.xlabel('Number of Epochs')
plt.ylabel('Accuracy')
plt.title('Accuracy of ANN with Different Epochs')
plt.legend()
plt.show()

plt.plot(rf_estimator_values, rf_accuracies, label='Random Forest')
plt.xlabel('Number of Estimators')
plt.ylabel('Accuracy')
plt.title('Accuracy of Random Forest with Different Number of Estimators')
plt.legend()
plt.show()

